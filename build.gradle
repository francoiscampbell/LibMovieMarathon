plugins {
    id 'me.tatarka.retrolambda' version '3.2.0'
    id 'java'
    id 'maven'
    id "com.jfrog.bintray" version "1.2"
}

group 'io.github.francoiscampbell'
version '1.3.5'

//noinspection GroovyUnusedAssignment
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'http://dl.bintray.com/francoiscampbell/maven'
    }
}

sourceSets {
    main {
        java {
            exclude 'io/github/francoiscampbell/Main.java'
            exclude 'io/github/francoiscampbell/api/ApiKey.java'
        }
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'com.intellij:annotations:12.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'joda-time:joda-time:2.8.1'
    compile 'io.github.francoiscampbell:more-math:+'
    compile 'com.fatboyindustrial.gson-jodatime-serialisers:gson-jodatime-serialisers:1.1.0'
    compile 'net.sourceforge.streamsupport:streamsupport:1.3'
}

bintray {
    user = project.BINTRAY_USER
    key = project.BINTRAY_KEY

    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = 'io.github.francoiscampbell:moviemarathon'
        licenses = ['BSD 2-Clause']
        vcsUrl = 'https://github.com/francoiscampbell/MovieMarathon.git'
        //noinspection GroovyAssignabilityCheck
        version {
            name = project.version
            desc = 'Library for planning movie marathons'
            released = new Date()
            vcsTag = 'v' + project.version
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task artifacts {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
        configurations.findAll().each { config ->
            println "${config}:"
            config.allArtifacts.getFiles().each { file -> println " " + file }
            println ' '
        }
    }
}